name: CI

on:
  schedule:
    - cron: 0 0 * * 0
  push:
    branches:
      - master
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+**'
  pull_request:

jobs:
  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install toolchain and target
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-x86_64-unknown-linux-gnu
          default: true

      - name: cargo fmt -- --check
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  coverage:
    name: Coverage
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install toolchain and target
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-x86_64-unknown-linux-gnu
          default: true

      - name: '`cargo test`'
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all --all-targets --all-features --no-fail-fast
        env:
          CARGO_INCREMENTAL: '0'
          RUSTFLAGS: -Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Zno-landing-pads

      - name: grcov
        id: grcov
        uses: actions-rs/grcov@v0.1

      - name: Codecov
        uses: codecov/codecov-action@v1.0.3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ${{ steps.grcov.outputs.report }}

  build:
    strategy:
      fail-fast: false
      matrix:
        channel:
          - stable
        target:
          # https://internals.rust-lang.org/t/demote-windows-mingw-targets-to-lower-tiers-or-re-enable-their-tests/10536
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - x86_64-unknown-linux-gnu
        include:
          - channel: stable
            target: x86_64-pc-windows-msvc
            os: windows-2019
          - channel: stable
            target: x86_64-apple-darwin
            os: macOS-10.14
          - channel: stable
            target: x86_64-unknown-linux-gnu
            os: ubuntu-18.04

    name: ${{ matrix.channel }}-${{ matrix.target }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install toolchain and target
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.channel }}-${{ matrix.target }}
          default: true

      - name: rustup component add
        run: rustup component add clippy

      - name: cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all --all-targets --all-features -- -D warnings

      - name: cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all --all-targets --all-features

      - name: cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all --all-targets --all-features --no-fail-fast

      - name: Run
        run: cargo run --all-features -- linked --debug | jq .
        shell: bash

  release:
    strategy:
      fail-fast: true
      matrix:
        target:
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - x86_64-unknown-linux-gnu
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-2019
          - target: x86_64-apple-darwin
            os: macOS-10.14
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-18.04

    name: GitHub Release (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    needs: [rustfmt, coverage, build]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install toolchain and target
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-${{ matrix.target }}
          default: true

      - name: cargo build --release
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --all-features

      - name: Create an asset
        id: asset
        run: . ./ci/asset.bash ${{ matrix.target }}
        shell: bash

      - name: Upload
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.asset.outputs.asset }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: cargo pubish
    runs-on: ubuntu-18.04
    needs: [rustfmt, coverage, build, release]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v1

      - name: Install toolchain and target
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-x86_64-unknown-linux-gnu
          default: true

      - name: cargo publish
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --all-features --verbose --token ${{ secrets.CRATES_IO_TOKEN }}
